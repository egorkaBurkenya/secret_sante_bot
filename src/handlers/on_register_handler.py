from bot import dp, bot, UserState
from aiogram.utils.markdown import text, bold
from aiogram.types import Message, ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext

from src.helpers.delete_messages import delete_messages_for_count

@dp.message_handler(content_types=["text"], state=UserState.Registration.WatingName)
async def on_register_get_name_handler(message: Message, state: FSMContext):
    await delete_messages_for_count(message, bot)
    name = message.text.strip() 
    await state.update_data(name=name)
    await message.answer(
        text(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {name}",
            "\n\n –û—Ç–ø—Ä–∞–≤–ª—å —Ñ–æ—Ç–æ—á–∫—É, –∫–æ—Ç–æ—Ä—É—é —É–≤–∏–¥–∏—Ç —Ç–≤–æ–π —Å–∞–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø–ª–∏–∑)üì∑"
            )
    )
    await UserState.Registration.next()

@dp.message_handler(content_types=["photo"], state=UserState.Registration.WatingPhoto)
async def on_register_get_photo_handler(message: Message, state: FSMContext):
    await delete_messages_for_count(message, bot)
    photo_url = message.photo[-1].file_id
    await state.update_data(photo_url=photo_url)
    await message.answer_photo(
        photo=photo_url,
        caption=text(
            "–û—Ç–ª–∏—á–Ω–æ... –Ω—É —Ç—ã –∫–æ–Ω–µ—á–Ω–æ -> ü§°(–∫–ª–æ—É–Ω)",
            "\n–ù–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –∫—Ä–∞—Å–∏–≤—ã–π!üßëüèª‚ÄçüéÑ",
            "\n–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–æ —á—Ç–æ –±—ã —Ç—ã —Å–∫–∞–∑–∞–ª —Å–≤–æ–∏ —Ö–æ—Ç–µ–ª–∫–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
            "\n\n—á—Ç–æ –±—ã —Ç–≤–æ–π —Å–∞–Ω—Ç–∞ –º–æ–≥ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–±–µ –ª—É—á—â–∏–π –ø–æ–¥–∞—Ä–æ–∫!!",
            "\n\n –ò –Ω–µ –∑–∞–±—ã–≤–∞–π —á—Ç–æ —É –Ω–∞—Å –±—é–¥–∂–µ—Ç –æ—Ç 1500 –¥–æ 2000 —Ä—É–±–ª–µ–π (—á—Ç–æ –±—ã –Ω–∏–∫–æ–≥–æ –Ω–µ —Ä–∞–∑–æ—Ä—è—Ç—å)",
            "\n–ò –æ—Ç–ø—Ä–∞–≤–ª—å –≤—Å–µ –æ–¥–∏–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!!!"
        ))
    await UserState.Registration.next()

@dp.message_handler(content_types=["text"], state=UserState.Registration.WatingWishlist)
async def on_register_get_wishlist_handler(message: Message, state: FSMContext):
    await delete_messages_for_count(message, bot)
    await state.update_data(wishlist=message.text)
    await message.answer(
        text(
            "–ù—É —É —Ç–µ–±—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è...",
            bold("\n–Ω–æ –Ω–µ –≤–æ–ª–Ω—É–π—Å—è\\!!!"),
            "\n—è –≤—Å–µ –ø–µ—Ä–µ–¥–º —Ç–≤–æ–µ–º—É —Å–∞–Ω—Ç–µ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–æ –±—É–∫–≤—ã\\!",
            bold("\n\n–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ —á–µ–≥–æ –±—ã —Ç–µ–±–µ —Ç–æ—á–Ω–æ –Ω–µ —Ö–æ—Ç–µ–ª–æ—Å—åüõë")
            )
        )
    await UserState.Registration.next()

@dp.message_handler(content_types=["text"], state=UserState.Registration.WatingHateList)
async def on_register_get_hatelist_handler(message: Message, state: FSMContext):
    await delete_messages_for_count(message, bot)
    await state.update_data(hatelist=message.text)
    await message.answer(
        text(
            "–Ω—É —Ç—ã –∏ –¥—É—à–Ω–∏–ª–∞... ü§°",
            bold("\n–Ω–æ –Ω–µ –≤–æ–ª–Ω—É–π—Å—è\\!!!"),
            "\n—è –≤—Å–µ –ø–µ—Ä–µ–¥–º —Ç–≤–æ–µ–º—É —Å–∞–Ω—Ç–µ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–æ –±—É–∫–≤—ã\\!",
            "\n—Ç—ã–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
            ),
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∂–º–∏‚úÖ", callback_data="hub")]]
))
    await UserState.Hub.Main.set()